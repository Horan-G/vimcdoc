*usr_05.txt*    Vim版本6.0.  最后修改时间：2001年9月3日，翻译于2002年6月2日

                    VIM用户手册 - Bram Moolenaar
                 （由nek_in翻译，nek_in@21cn.com）

                        选项设置


Vim可以按你的需要进行设置。本章告诉你怎样使Vim用你特有的选项启动，怎样增加外挂
增强Vim的能力，以及怎样进行宏定义。

|05.1|  vimrc文件
|05.2|  vimrc示例解释
|05.3|  简单映射
|05.4|  增加外挂
|05.5|  增加帮助
|05.6|  选项窗口
|05.7|  常用选项

      下一章：|usr_06.txt|  使用语法加亮
      前一章：|usr_04.txt|  作小改动
        目录：|usr_toc.txt|

=============================================================================
*05.1*  vimrc文件

可能你已经厌倦了输入那些经常用到的命令了。要让Vim用你习惯的设置启动，你可以
把这些设置写到一个叫vimrc的文件中。Vim会在启动的时候读入这个文件。

如果你不知道你的vimrc在什么地方，可以使用如下命令：
>
        :scriptnames
<
命令列出的文件列表中应该有一个叫“.vimrc”或者“_vimrc”的文件在你的home目录
中。
    如果你还没有vimrc，请参考|vimrc|一节看看你应该在什么地方创建vimrc文件。
另外“:version”命令能告诉你vim在什么地方找“用户私有vimrc文件”。

对于Unix系统，肯定是如下文件：
>
        ~/.vimrc
<
对于MS-DOS和MS-Windows，常常使用下面其中一个文件：
>
        $HOME/_vimrc
        $VIM/_vimrc
<
vimrc文件可以包含任何冒号命令。最简单的是设置选项命令。例如，如果你想Vim启动
的时候'incsearch'选项总是on状态的，可以在你的vimrc文件中加上：
>
        set incsearch
<
要使这个命令生效，你需要重启动Vim。后面我们还会学到怎么不退出Vim就能让它生效。

这一章只解释最基本的选项。要学习更多关于写Vim脚本的知识，请参见|usr_41.txt|。

=============================================================================
*05.2*  vimrc示例解释

在第一章中，我们曾经介绍过怎样用vimrc示例文件（包括在Vim发布中）使Vim启动于非
vi兼容模式（参见|not-compatible|）。这个文件可以在这里找到：
>
        $VIMRUNTIME/vimrc_example.vim
<
我们在这一章中介绍这个文件中用到的一些命令。这会对你进行参数设置有一定的帮助。
但我们不会介绍所有的内容。你需要用“:help”获得更多的帮助。
>

        set nocompatible
<
如第一章所述，这个命令人为地告诉Vim工作在增强模式，同时与Vi不完全兼容。要把
'compatible'设为off，'nocompatible'可以用于完成这个功能。

>
        set backspace=indent,eol,start
<
这指明在插入模式下，<BS>可以删除光标前面的字符。逗号分隔的三个值分别指行首的字
符，分行符和插入模式启动点。（译者注：在一般情况下，<BS>不能越过这三种地方。

>
        set autoindent
<
这使Vim在启动一个新行的时候使用与前一行一样的缩进。就是说，新行前面会有同样多的
空白字符。启动新行是指用<Enter>换行，在普通模式下执行“o”命令等情况。

>
        if has("vms")
          set nobackup
        else
          set backup
        endif

这告诉Vim当覆盖一个文件的时候保留一个备份。但VMS系统除外，因为VMS系统会自动产
生备份文件。备份文件的名称是在原来的文件名上加上“~”字符。参见|07.4| 

>
        set history=50
<
这个命令保存50个命令和50个查找样式的历史。如果你想Vim记住更多或者更少的命令，
可以把这个数改成其他值。

>
        set ruler
<
总在Vim窗口的右下角显示当前光标位置。

>
        set showcmd
<
在Vim窗口右下角，标尺的右边显示未完成的命令。例如，当你输入“2f”，Vim在等你
输入要查找的字符并且显示“2f”。当你再输入w，“2fw”命令被执行，“2f”自动消
失。

        +-------------------------------------------------+
        |text in the Vim window                           |
        |~                                                |
        |~                                                |
        |-- VISUAL --                   2f     43,8   17% |
        +-------------------------------------------------+
         ^^^^^^^^^^^                  ^^^^^^^^ ^^^^^^^^^^
          'showmode'                 'showcmd'  'ruler'

>
        set incsearch

在查找模式输入完前显示匹配点。

>
        map Q gq
<
这定义一个键映射。下一节会介绍更多的相关内容。这定义“Q”命令为“gq”，这是在
Vim 5.0中“Q”命令的作用。如果没有设置这个映射，“Q”会启动Ex模式，这不会是你
想要的情况。

>
        vnoremap p <Esc>:let current_reg = @"<CR>gvs<C-R>=current_reg<CR><Esc>

这是一个复杂映射。这里不介绍它是怎么工作的。它的作用是使“p”命令在可视模式下
用拷贝的字符覆盖被选中的字符。这依然是一个命令序列，与你直接输入没有什么两样。

>
        if &t_Co > 2 || has("gui_running")
          syntax on
          set hlsearch
        endif

这激活语法加亮功能，但仅在颜色功能有效的时候才有效。而'hlsearch'选项告诉Vim加
亮最后一个查找模式的匹配点。“if”命令在设置选项的时候非常有用，它使设置命令在
某些条件下才执行。更多的内容请参见|usr_41.txt|。

                                                        *vimrc-filetype*  >
        filetype plugin indent on

这启动三个非常灵巧的机制：
1. 文件类型探测
    当你开始编辑一个文件的时候，Vim会试图确定这个文件的类型。当你编辑“main.c”
    ，Vim会根据扩展名“.c”认为这是一个C源文件。当你编辑一个文件前面是“#!/bin
    /sh”的文件时，Vim会把它认作“sh”文件。
    文件类型探测用于语法加亮和以下另两个选项。
    请参见|filetypes|。

2. 使用文件类型相关的外挂
    不同的文件需要不同的选项支持。例如，当你编辑一个“c”文件，用'cindent'选项
    来自动缩进就非常有用。一些选项一般通过文件类型相关外挂来实现。你还可以加入
    自己的外挂，请参见|write-filetype-plugin|。

3. 使用文件缩进
    当编辑程序的时候，行缩进会自动执行。Vim用不同的策略处理不同的文件类型。请参
    见|:filetype-indent-on|和'indentexpr'。

>
        autocmd FileType text setlocal textwidth=78

这使Vim在一行长于78个字符的时候自动换行，但仅在无格式文本文件中有效。这里包括
两个部分。其中“autocmd FileType text”定义个自动命令，表示当文件类型被设置为
“text”的时候，后面的命令自动执行。“setlocal textwidth=78”设置'textwidth'
选项为78，但仅在本文件中局部有效。
>

        autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal g`\"" |
            \ endif

这是又一个自动命令。这回它设置为在读入任何文件的时候自动执行。后面那堆复杂的东
西检查'"标记是否被设置，如果是，则跳转到这个标记。行首的反斜杠用于把所有语句
连接成一行。这可以避免一行写得太长，请参见|line-continuation|。这只在Vim脚本
文件中有效，在命令行中无效。

=============================================================================
*05.3*  简单映射

映射可以是你把一系列Vim命令绑定为一个单键。假设你要用一个大括号围住一个特定的
单词，例如，把“amount”变成“{amount}”。用“:map”命令，就可以让F5来完成这个
工作。这个命令如下：
>
        :map <F5> i{<Esc>ea}<Esc>
<
        注意：
        在输入这个命令时，<F5>要用四个字符表示。相似地，输入<Esc>不是直接按
        <Esc>键，而是输入五个字符。在读这份手册要注意这一点！

让分解一下这个命令：
    <F5>        F5功能键。这是命令的触发器，当这个键被按下时，相应的命令即被
                执行。
    
    i{<Esc>     插入{字符。<Esc>键用于退出插入模式。

    e           移动到词尾。

    a}<Esc>     插入}到单词尾。

执行“:map”命令后，要在单词两端加上{}，只需要移到单词上的第一个字符并按F5。

在这个例子中，触发器是一个单键；它还可以是任何字符串。但当你使用一个已经存在
的Vim命令，该命令将不在有效，所以你最后避免出现这种情况。
    一个可用于映射的键是反斜杠。因为你可能想定义多个映射，加上另一个单词后，
你可以映射“\p”为在单词两端加括号，而映射“\c”为加大括号，例如：

        :map \p i(<Esc>ea)<Esc>
        :map \c i{<Esc>ea}<Esc>

你需要在敲入\后，立即敲入p，以便Vim知道这是一对命令。

“:map”命令（无参数）列出当前已定义的映射。至少包括普通模式下的那些。更多的内
容参见|40.1|。

==============================================================================
*05.4*  增加外挂                                        *add-plugin* *plugin*

Vim可以通过外挂增强功能。外挂其实是一个在Vim启动的时候能被自动执行的脚本。简单
地把外挂放到你Vim的plugin目录中就可以使它生效。
（这个功能在|+eval|被编译到Vim中时才有效）

Vim中有两种外挂：
           全局外挂：用于所有类型的文件
   文件类型相关外挂：仅用于特定类型的文件

我们将先讨论全局外挂，然后才到文件类型相关外挂|add-filetype-plugin|。


全局外挂                                                *standard-plugin*

当你启动Vim，它会自动加载一些外挂，你不需要为此做任何事。这些外挂增加一些
很多人想用的，但仅由Vim脚本实现而不编译到Vim中的功能。你可以在帮助目录中
找到这些外挂：|standard-plugin-list|，还可以参照|load-plugin|。

                                                        *add-global-plugin*
你可以在把你总要使用的功能写成全局外挂。增加一个全局外挂只要两步：
1. 获得一个外挂的拷贝
2. 把它塞进合适的目录


获得一个全局外挂

在什么地方可以找到外挂？
- 有一些与Vim一起发布，你可以在$VIMRUNTIME/macros目录或其子目录中找到。
- 从网上下载，查一下这个http：http://vim.sf.net。
- 在Vim的邮件列表中找到：|maillist|。
- 自己写一个，参见|write-plugin|。


使用一个全局外挂

首先阅读一些外挂内的说明文字，看看有没有什么特殊的限制。然后拷贝到你的外挂目
录：


        系统            外挂目录 ~
        Unix            ~/.vim/plugin/
        PC and OS/2     $HOME/vimfiles/plugin 或 $VIM/vimfiles/plugin
        Amiga           s:vimfiles/plugin
        Macintosh       $VIM:vimfiles:plugin
        RISC-OS         Choices:vimfiles.plugin

以Unix系统为例（假设你还没有外挂目录）：
>
        mkdir ~/.vim
        mkdir ~/.vim/plugin
        cp /usr/local/share/vim/vim60/macros/justify.vim ~/.vim/plugin
<
就是这样了！现在你可以用这个外挂定义的命令调整文字了。


文件类型相关外挂                         *add-filetype-plugin* *ftplugin*

Vim的发布中包括一套针对不同文件类型的外挂，你可以用如下命令启用它们：
>
        :filetype plugin on

如果你缺少某种文件类型的外挂，或者你需要一个更好的，你可以增加一个文件类型相
关的外挂。（译者注：原文这里好像写错了，这个根据上下文作一些修改）增加文件类
型相关的外挂也只需两步。
1. 获取一个外挂的拷贝
2. 塞到合适的目录。


取得文件类型相关外挂

你可以在找全局外挂的相同地方找到文件类型相关外挂。注意一下外挂有没有注明文件
类型，据此你可以知道这个外挂是全局的还是文件类型相关的。在$VIMRUNTIME/macros
中的是全局外挂，文件类型相关外挂在$VIMRUNTIME/ftplugin中。


使用文件类型相关外挂

你可以通过把外挂文件放到合适的目录来增加一个外挂。目录的名字与前面提过的全局
外挂的位置一样，但最后一级目录是“ftplugin”。假设你找到一个用于“stuff”文
件类型的外挂，而且你的系统是Unix，那么，你可以把这个文件用如下命令移入外挂
目录：
>
        mv thefile ~/.vim/ftplugin/stuff.vim

如果这个文件已经存在，你可以检查一下两个外挂有没有冲突。如果没有，你可以用另
一个名字：
>
        mv thefile ~/.vim/ftplugin/stuff_too.vim

这里，下划线用来分开文件类型和其他部分（这些部分可以由任意字符组成）。但如果你
用“otherstuff.vim”就不行了，这是用于文件类型“otherstuff”的。

在MS-DOS中不能使用长文件名。如果你增加第二个外挂，而这个外挂超过6个字符，你就
没法用了。你可以通过使用目录来解决这个问题
>
        mkdir $VIM/vimfiles/ftplugin/fortran
        copy thefile $VIM/vimfiles/ftplugin/fortran/too.vim

总的来说，一个文件类型相关的外挂的名称是：

        ftplugin/<filetype>.vim
        ftplugin/<filetype>_<name>.vim
        ftplugin/<filetype>/<name>.vim

这里“<name>”可以是任何你喜欢的名字。例如，在Unix下，“stuff”文件类型的外挂
可以是：
>
        ~/.vim/ftplugin/stuff.vim
        ~/.vim/ftplugin/stuff_def.vim
        ~/.vim/ftplugin/stuff/header.vim

这里，<filetype>部分是相应文件类型的名称。只有对应文件类型的文件才会用这个外
挂，外挂的<name>部分则不重要，你可以对同一个文件类型使用多个外挂。注意外挂必
须以“.vim”结尾。


深入参考读物：
|filetype-plugins|      文件类型相关外挂文档和关于如何避免映射问题的信息。
|load-plugins|          全局外挂的启动时机
|ftplugin-overrule|     控制全局外挂的选项
|write-plugin|          如果写外挂
|plugin-details|        关于如何使用外挂的信息或者当你的外挂不工作的时候如何
                        处理。

=============================================================================
*05.5*  增加帮助文件                            *add-local-help*

好幸运的话，你安装的外挂还会包括帮助文件。我们这里解释如何安装这个帮助文件，
以便你能方便地获得新外挂的帮助。

我们以“matchit.vim”外挂为例（包括在Vim中）。这个外挂使“%”命令可以在两个
HTML标记间，Vim脚本的if/else/endif间等匹配点间跳转。这非常有用，但它不向前
兼容（这也是为什么默认的情况下它不会被激活）。
    这个外挂有一个文档：“matchit.txt”。为了加入这个文档，我们先把外挂拷贝
到合适的位置。这次，我们在Vim内完成这个工作，以便可以使用$VIMRUNTIME。（如果
某些目录已经存在你可以省略一些“mkdir”命令）
>
        :!mkdir ~/.vim
        :!mkdir ~/.vim/plugin
        :!cp $VIMRUNTIME/macros/matchit.vim ~/.vim/plugin

先在某个'runtimepath'中建立一个doc目录。
>
        :!mkdir ~/.vim/doc

再把帮助文件拷贝进去：
>
        :!cp $VIMRUNTIME/macros/matchit.txt ~/.vim/doc

现在开始玩技巧了，怎样使Vim允许你跳转到新的主题上？――用|:helptags|命令产生
一个本地的tags文件：
>
        :helptags ~/.vim/doc

现在，你可以用这个命令
>
        :help g%

去获得“g%”的帮助了。在使用如下命令的时候，可以看见一个新的入口：
>
        :help
<
向下移到“LOCAL ADDITIONS”一节。在那里你可以看见新的帮助的入口，你可以从这里
跳转到新的帮助中。

要写一个本地帮助文件，请参考|write-local-help|。

=============================================================================
*05.6*  选项窗口

如果要找一个选项，你可以查找这个位置的帮助：|options|。另一个方法是用如下命
令：
>
        :options
<
这会打开一个新窗口，其中给出一个选项的列表，并对每个选项提供一行解释。这些选项
根据种类分组。把光标移到一个主题上然后按回车就可以跳转到那里，再按一下回车或者
CTRL-O就可以跳回来。

你可以通过这个窗口改变一个选项的值。例如，移到“displaying text”对象。
然后把光标移到下面这行：
>
        set wrap        nowrap

当你在上面回车，这行会改变为：
>
        set nowrap      wrap
<
现在，这个选项被关上了。

这行的上面是对这个选项的简要描述。把你的光标向上移动一行，然后按<Enter>，你
可以跳转到'wrap'的完整帮助，再用CTRL-O可以跳回来。

对于那些值为数字或者字符串的选项，按<Enter>可以赋一个新的值。例如，把光标移动
到下面这行：
>
        set so=0
<
用$移到行尾，再用“r5”命令修改为五，然后按<Enter>使修改生效。现在如果你移动
一下光标，你会发现在你的光标移到窗口边界前，你的文字就开始滚动了。这就是选项
'scrolloff'完成的功能：它指定在距离边界多远的地方开始滚动文字。

=============================================================================
*05.7* 常用选项

Vim中有很多选项。大部分你很少用得上。我们在这个介绍一些常用的。别忘了你可以
通过“:help”命令获得更多的帮助，方法是在选项命令前后加上单引号，例如：
>
        :help 'wrap'
<
如果你搞乱了一个选项，你可以通过在选项后加上一个&号把它恢复到默认值。例如：
>
        :set iskeyword&
<
禁止自动换行（Not Wrapping Lines)

Vim通常会对长行自动换行，以便你可以看见所有的文字。但有时最好还是能让文字在一
行中显示完。这样，你需要左右移动才能看到一整行。以下命令可以切换换行方式：
>
        :set nowrap
<
当你移到到那些不能显示的文字上，Vim会自动向右滚动让你看到后面的文字，要一次滚
动十个字符，这样：
>
        :set sidescroll=10
<
这个命令不改变文件中的文字，只改变显示方式。


移动命令换行

很多命令只能在一行中移动。你可以通过'whichwrap'选项改变它。如下命令把这个选项
设为默认值：
>
        :set whichwrap=b,s
<
这样，当光标处于行首时用 <BS> 键可以回到前一行的结尾；当处于行尾时用 <Space> 
键可以移动到下一行的行首。

要允许<Left>和<Right>键也能这样，可以用这个命令：
>
        set whichwrap=b,s,<,>
<
这只在普通模式中有效，要在插入模式中也有效，可以：
>
        :set whichwrap=b,s,<,>,[,]
<
还有一些标志可以加，参见'whichwrap'。


显示TAB键

文件中有TAB键的时候，你是看不见的。要把它显示出来：
>
        :set list
<
现在TAB键显示为^I，而$显示在每行的结尾，以便你能找到可能会被你忽略的空格在哪
里。
    这样做的一个缺点是在有很多TAB的时候看起来很丑。如果你使用一个有颜色的终端
，或者使用GUI模式，Vim可以用高亮显示空格和TAB。
    还可以试试下面这个命令：
>
        :set listchars=tab:>-,trainl:-
<
现在，TAB会被显示成“>---”而行尾多余的空白字符显示成“-”。看起来好多了，是
吧？


关键字

'iskeyword'选项指定什么字母被看作是一个单词中的：
>
        :set iskeyword
<         iskeyword=@,48-57,_,192-255 >

“@”表示所有字母。“48-57”表示ASCII字符48-57，即数字0到9。“192-255”是可打
印的拉丁字符。
    有时你希望横线也是关键字，以便“w”命令会把“upper-case”看作是一个单词。
你可以这样做：
>
        :set iskeyword+=-
        :set iskeyword
<         iskeyword=@,48-57,_,192-255,-

看一下新的值，你会发现Vim自动在“-”前面加了一个逗号。
    要从中去掉一个字符，例如要移走下划线：
>
        :set iskeyword-=_
        :set iskeyword
<         iskeyword=@,48-57,192-255,-

这回，逗号自动被删除了。


显示消息的空间

当Vim启动的时候，在屏幕底部有一行被用于显示消息。当消息很长的时候，多余的部分
会被截断。这样你只能看到一部分。或者文字自动滚动，你要按<Enter>去翻屏。
你可以给'cmdheight'选项赋一个值选择用多少行显示消息。例如：
>
        :set cmdheight=3
<
这样意味着你用于编辑文字的空间少了，所以这实际上是一种折中。

=============================================================================

下一章：|usr_06.txt|  使用语法加亮

版权：参见|manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
