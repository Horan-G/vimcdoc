*usr_02.txt*    Vim version 6.1.     最后修改：2001年9月3日（翻译于2002年5月10日）

                    VIM用户手册 － Bram Moolenaar(由nek_in翻译)

                                Vim初步


本章提供用Vim编辑一个文件的足够信息。这里提供的方法不是很好或者很快，但至少你能
编辑。花些时间去练习这些命令，这是后面的知识的基础。

|02.1|  第一次运行Vim
|02.2|  插入文本
|02.3|  移动光标
|02.4|  删除字符
|02.5|  撤销与重做
|02.6|  其他编辑命令
|02.7|  退出
|02.8|  寻求帮助

    下一章：|usr_03.txt| 移动
    前一章：|usr_01.txt| 关于本手册
      目录：|usr_toc.txt|

==============================================================================
*02.1*  第一次运行Vim

启动Vim的命令如下：
>
    gvim file.txt
<
在UNIX操作系统中，你可以在任意命令提示符下输入这个命令。如果你用的是Microsoft
Windows, 启动一个MS-DOS控制台，再输入这个命令。
    无论哪一种方式，现在Vim开始编辑一个名为file.txt的文件了。由于这是一个新建
文件，你会得到一个空的窗口。这个屏幕看起来象下面这样：

        +---------------------------------------+
        |#                                      |
        |~                                      |
        |~                                      |
        |~                                      |
        |~                                      |
        |"file.txt" [New file]                  |
        +---------------------------------------+
        	('#"是当前关标的位置)

以波纹线(~)开头的行表示该行在文件中不存在。换句话说，如果Vim打开的文件不能充满
这个显示的屏幕，它就显示一个波纹线开头的行。在屏幕的底部，有一个消息行指示文件
名为file.txt并且说明这是一个新建的文件。这行信息是临时的，新的信息可以覆盖它。


VIM命令

gvim命令建立一个新窗口用于编辑。如果你用的是这个命令：
>
        vim file.txt
<
则编辑在命令窗口内进行。换句话说，如果你在xterm中运行，编辑器使用xterm窗口。
如果你用的是Microsoft window的MS-DOS窗口，编辑器使用这个MS-DOS窗口。两个版本
显示出来的文本看起来是一样的。但如果你用的是gvim，就会有其他特性，如菜单条。
后面会有更多的描述。

==============================================================================
*02.2*  插入文本

Vim是一个多模式的编辑器。就是说，在不同模式下，编辑器的响应是不同的。在普通模式
下，你敲入的字符只是命令；而在插入模式，你敲入的字符就成为插入的文本了。
    当你刚刚进入Vim，它处在普通模式。通过敲入"i"命令（i是Insert的缩写）可以启动
插入模式，这样你就可以输入文字了，这些文字将被插入到文件中。不用担心输错了，
你还能够随后修正它。要输入下文的程序员打油诗，你可以这样敲：
>
        iA very intelligent turtle
        Found programming UNIX a hurdle
<
输入"turtle"后，你通过输入回车开始一个新行。最后，你输入<Esc>键退出插入插入模式
回到普通模式。现在在你的Vim窗口中有两行文字了：

        +---------------------------------------+
        |A very intelligent turtle              |
        |Found programming UNIX a hurdle        |
        |~                                      |
        |~                                      |
        |                                       |
        +---------------------------------------+

什么是模式？

要看到你在什么模式，输入如下命令：
>
        :set showmode
<
你会发现当你敲入冒号后，Vim把光标移到窗口的最后一行。那里是你输入“冒号命令”
（以冒号开头的命令）的地方，敲入回车结束这个命令的输入（所有的冒号命令都用
这种方式结束）
    现在，如果你输入“i”命令，Vim会在窗口的底部显示 --INSERT--（中文模式
显示的是--插入-- ―― 译者注），这表示你在插入模式。

        +---------------------------------------+
        |A very intelligent turtle              |
        |Found programming UNIX a hurdle        |
        |~                                      |
        |~                                      |
        |-- INSERT --                           |
        +---------------------------------------+

如果你输入<Esc>回到普通模式，最后一行又变成空白。


解决问题

Vim新手常常遇到的一个问题是不知道自己在什么模式下，可能是因为忘了，也可能
是因为不小心敲了一个切换模式的命令。无论你在什么模式，要回到普通模式，只
要敲<Esc>就可以了。有时你需要敲两次，如果Vim发出“嘀”一声，就表示你已经
在普通模式。

=============================================================================
*02.3*  移动光标

回到普通模式后，你可以使用如下命令移动光标：
    
    h   左
    j   下
    k   上
    l   由

这些命令看起来是随便选的。无论如何，谁听说过用l表示右的？但实际上，作这些选择
是有理由的：移动光标是最普通的编辑器命令，这些命令将放在你可以最快输入的位置
（特别是当你用十指输入的时候。

    注意：
    你还可以用箭头键移动光标，但这样会减慢你输入的速度，因为你必须把你的手从
    文本键移动到箭头键。想象一下，你在一个小时内可要这样做几百次，这可要花
    相当多的时间的。（译者注：原文是根据英文输入来说明的，如果你输入的是中文
    如果你需要在编辑中移动光标，还是用箭头快一些，因为输中文的时候，你要输入
    命令还要把中文输入法切换到英文输入状态。主要还是看个人习惯吧，译者倒是已经
    习惯不使用箭头键了，这样至少直接使用vi的时候不需要改变习惯）
        而且，有一些键盘是没有方向键的，或者放在一些很特别的地方（译者注：译者
    现在用的便携就是这样）。所以，知道hjkl的用法在这些情况下就很有帮助了。

记住这些命令的一个方法是：h在左边，l在右边，j指着下面。用图表示如下：
>
                       k
                   h     l
                     j

<
学习这些命令的最后方法是使用它。用“i”命令输入更多的文字。然后用hjkl键移动
光标并在某些地方输入一些单词。别忘了用<Esc>切换回普通模式。|vimtutor|也是一个
练习的好办法。

============================================================================
*02.4*  删除字符

要删除一个字符，把光标移到它上面然后输入“x”。（这是对以前的打字机的一种回归，
那时你通过在字符上输入xxxx删除它） 例如，把光标移到行首，然后输入xxxxxxx（七个x）
可以删除“A very”。结果看起来这样：

        +---------------------------------------+
        |intelligent turtle                     |
        |Found programming UNIX a hurdle        |
        |~                                      |
        |~                                      |
        |                                       |
        +---------------------------------------+

现在你可以输入新的字符了，例如，通过输入：
>
        iA young <Esc>
<
这个命令启动一次插入操作（注意那个“i”），并插入“A young”，然后退出
插入模式（注意最后一个<Esc>）。结果是：

        +---------------------------------------+
        |A young intelligent turtle             |
        |Found programming UNIX a hurdle        |
        |~                                      |
        |~                                      |
        |                                       |
        +---------------------------------------+


删除一行

要删除一整行要使用“dd”命令，后一行会移上来填填掉留下的空行：

        +---------------------------------------+
        |Found programming UNIX a hurdle        |
        |~                                      |
        |~                                      |
        |~                                      |
        |                                       |
        +---------------------------------------+

删除一个分行符

在Vim中你可以把两行连起来，这意味着两行间的换行符被删除了。“J”命令
用于完成这个功能。
    以下面两行为例子：
>
        A young intelligent
        turtle
<
把光标移到第一行，然后按“J”：
>
        A young intelligent turtle
<
==============================================================================
*02.5*  撤销与重做

假设现在你删得太多了，当然，你可以重新输入需要的内容，不过，你还有一个更简单的
选择。“u”命令撤销上一个编辑操作。看看下面这个操作：先用“dd”删除一行，再敲
“u”，该行又回来了。
    再给一个例子：把光标移到第一行的A上：
>
        A young intelligent turtle
<
现在输入xxxxxxx删除“A young”。结果如下：

         intelligent turtle ~

输入“u”撤销最后一个删除操作。那个删除操作删除字符g，所以撤销命令恢复这个字符：

        g intelligent turtle ~

下一个u命令恢复倒数第二个被删除的字符：

        ng intelligent turtle ~

下一个u命令恢复u，如此类推：

        ung intelligent turtle ~
        oung intelligent turtle ~
        young intelligent turtle ~
         young intelligent turtle ~
        A young intelligent turtle ~

    注意：
    如果你输入“u”两次，你的文本恢复原样，那应该是你的Vim被配置在Vi兼容
    模式了。看这里修正这个问题：|not-compatible|。
        本文假定你工作在“Vim的方式”。你可能更喜欢旧的Vi的模式，但是你必须
    小心本文中的一些小区别。


重做

如果你撤销得太多，你可以输入CTRL-R（redo）回退前一个命令。换句话说，它撤销
一个撤销。要看执行的例子，输入CTRL-R两次。字符A和它后面的空格就出现了：

        young intelligent turtle ~

有一个特殊版本的撤销命令：“U”（行撤销）。行撤销命令撤销所有在前一个编辑行
上的操作。 输入这些命令两次取消前一个“U”：

        A very intelligent turtle ~
          xxxx                          删除very

        A intelligent turtle ~
                      xxxxxx            删除turtle

        A intelligent ~
                                        用“U”恢复行
        A very intelligent turtle ~
                                        用“u”撤销“U”
        A intelligent ~

“U”命令自己改变自己，“u”命令撤销操作，CTRL-R命令重做操作。这有点乱，但不用
担心，用“u”和CTRL-R命令你可以切换到任何状态。

==============================================================================
*02.6* 其他编辑命令

Vim有大量的命令可以修改文本。参见|Q_in|和下文。这里是一些经常用到的：

添加

“i”命令在光标所在字符前面插入字符。一般情况下，这就够用了，但如果你刚好想在
行尾加东西怎么办？要解决这个问题，你需要在文本后插入字符。这通过“a”
（append）命令解决。
    例如，要改变如下行

        and that's not saying much for the turtle. ~
为
        and that's not saying much for the turtle!!! ~

把光标移到行尾的句号上。然后输入“x”删除它。现在光标处于一行的尾部了，现在输入
>
        a!!!<Esc>
<
添加三个感叹号到turtle的“e”后面了：

        and that's not saying much for the turtle!!! ~


打开一个新行

“o”命令在光标下建立一个新的空行，并把Vim切换到插入模式。然后你可以为这个新行
输入文本了。
    假定你的光标在下面两行中第一行的某个地方：

        A very intelligent turtle ~
        Found programming UNIX a hurdle ~

如果你现在用“o”命令并输入新的文字：

        oThat liked using Vim<Esc>

结果会是：

        A very intelligent turtle ~
        That liked using Vim ~
        Found programming UNIX a hurdle ~

“O”命令（大写）在光标上面打开一个新行。


指定个数

假定你想向上移动9行，你可以输入“kkkkkkkkk”或者你可以输入“9k”。实际上，
你可以在很多命令前面加一个数字。例如在这章的前面，你通过输入“a!!!<Esc>”
增加三个感叹号。另一个方法是使用命令“3a!<Esc>”。个数3要求把后面的命令执行
三次。同样的，要删除三个字符，可以使用“3x”。个数总是放在要被处理多次的
命令的前面。

=============================================================================
*02.7*  退出

使用“ZZ”命令可以退出。这个命令保存文件并退出。
        注意：
        与其他编辑器不一样，Vim不会自动建立一个备份文件。如果你输入“ZZ”，
        你的修改立即生效并且不能恢复。你可以配置Vim让它产生一个备份文件，
        参见|07.4|。


放弃修改

有时你会做了一系列的修改才突然发现现在还不如编辑前，不用担心，Vim有“放弃修改
并退出”的命令，那就是：
>
        :q!
<
别忘了按回车使你的命令生效。

如果你要了解细节，这就是：这个命令有三部分，包括冒号（:），它使Vim进入命令模式，
q命令，它告诉Vim退出，而感叹号是强制命令修饰符（override command modifier）。
    这里，强制命令修饰符是必要的，它要求Vim强制性地放弃修改并退出。如果你只是
输入“:q”，Vim会显示一个错误信息并拒绝退出：

        E37: No write since last change (use ! to override) ~

通过指定强制执行，你有效地告知Vim：“我知道我所做的看起来很傻，但我长大了，知道
自己在做什么了。”

如果你放弃修改后还想重新编辑，用“:e!”命令可以重新装载原来的文件。

=============================================================================
*02.8*  寻求帮助

所有你想知道的东西，都可以在Vim帮助文件中找到，随便找它问！
    要获得一般的帮助用这个命令：
>
        :help
<
你还可以用第一个功能键<F1>。如果你的键盘上有一个<Help>键，可能也能用。
    如果你不指定主题，“:help”命令显示一个普通的帮助窗口。Vim的作者在帮助系
统方面使用了一个很聪明的方案（也许可以说是很变态的方案）：他们用一个普通的编
辑窗口来显示帮助。你可以在帮助窗口中使用任何普通的Vim命令移动光标。所以，h，
j，k和l还是表示左，下，上和右。
    要退出帮助窗口，用退出一个普通窗口的命令：“ZZ”。这只会退出帮助窗
口，而不会退出Vim。

当你阅读帮助的时候，你会发现有一些文字被一对竖线括起来了(例如|help|）。这表示
一个超级链接。如果你把光标移到这两个竖线之间并按CTRL-]（标签跳转标签命令），
帮助系统会把你引向这个超级链接指向的主题。（由于不是本章的重点，这里不详细讨论，
Vim对超级链接的术语是“标签”（tag），所以CTRL-]实际是跳转到光标所在单词为名的
标签所在的位置。）
    跳转几次以后，你可能想回到原来的地方。CTRL-T（标签退栈）把你送回前一个
跳转点。CTRL-O（跳转到前一个位置）也能完成相同的功能。
    在帮助屏幕的顶上，有一个符号： *help* 。这个名字被帮助系统用来定义一个标签
（也就是超级链接的目标）。
    参见|29.1|可以了解更多关于标签的内容。

要获得特定主题的帮助，使用如下命令：
>
        :help {主题}
<
例如，要获得“x”命令的帮助，输入如下命令：
>
        :help x
<
要知道如何删除文本，使用如下命令：
>
        :help deleting （译者注：要直接用中文是不行了，除非我用中文来写这些标签……）
<
要获得所有命令的帮助索引，使用如下命令：
>
        help index
<
如果你需要获得一个包含控制字符的命令你的帮助（例如CTRL-A），你可以在它前面
加上前缀“CTRL-”。
>
        help CTRL-A
<
Vim有很多模式。在默认情况下，帮助系统显示普通模式的命令。例如，如下命令显示
普通模式的CTRL-H命令的帮助：
>
        :help CTRL-H
<
要表示其他模式，可以使用模式前缀。如果你需要插入模式的命令帮助，使用“i_”前
缀。例如对于CTRL-H，你可以用如下命令：
>
        :help i_CTRL-H
<
当你启动Vim，你可以带一些命令行参数。这些参数以短横线开头（-）。例如知道要-t
这个参数是干什么用的，可以使用这个命令：
>
        :help -t
<
Vim有大量的选项让你定制这个编辑器。如果你要获得选项的帮助，你需要把它括在一个
单引号中。例如，要知道'number'这个选项干什么的，使用如下命令：

        :help 'number'

如果你看到一个你不能理解的错误信息，例如：
>
        E37: No write since last change (use ! to override) ~

你可以使用使用E开头的错误号找关于它的帮助：
>
        :help E37
<
===============================================================================

下一章： |usr_03.txt|  移动

版权：参见|manual-copyright|     vim:tw=78:ts=8:ft=help:norl:
