*usr_12.txt*    Vim版本6.0.  最后修改时间：2001年9月3日，翻译于2002年11月27日

                    Vim用户手册 - Bram Moolenaar
                 （由nek_in翻译，nek_in@21cn.com）

                              小技巧


通过组合一些命令，你可以用Vim完成几乎所有的工作。本章将介绍一些有用的命令组
合。涉及的命令大都是前面章节介绍过的，但也会有一点新命令。

|12.1|  单词替换
|12.2|  把“Last, First”改成“First Last”
|12.3|  排序
|12.4|  单词统计
|12.5|  查阅man信息
|12.6|  删除多余空格
|12.7|  查找单词的使用位置

     下一章：|usr_20.txt|  命令行的快速输入
     前一章：|usr_11.txt|  从崩溃中恢复
       目录：|usr_toc.txt|

=============================================================================
*12.1*  单词替换

替换命令可以在全文中用一个单词替换另一个单词：
>
        :%s/four/4/g
<
“%”范围前缀表示在所有行中执行替换。最后的“g”标记表示替换行中的所有匹配点。
    如果你有一个象“thirtyfour”这样的单词，上面的命令会出错。这种情况下，这
个单词会被替换成“thirty4”。要解决这个问题，用“\<”来指定匹配单词开头：
>
        :%s/\<four/4/g

显然，这样在处理“fourty”的时候还是会出错。用“\>”来解决这个问题：
>
        :%s/\<four\>/4/g
<
如果你在编码，你可能只想替换注释中的“four”，而保留代码中的。由于这很难指定，
可以在替换命令中加一个“c”标记，这样，Vim会在每次替换前提示你：
>
        :%s/\<four\>/4/gc


在多个文件中替换

假设你需要替换多个文件中的单词。你的一个选择是打开每一个文件并手工修改。另外，
如果使用“记录－回放”命令会更快。
    假设你有一个包括有C++文件的目录，所有的文件都以“.cpp”结尾。有一个叫
“GetResp”的函数，你需要把它改名为“GetAnswer”。

        vim *.cpp               启动Vim，用当前目录的所有C++文件作为文件参数。
                                启动后你会停在第一个文件上。
        qq                      用q作为寄存器启动一次记录
        :%s/\<GetResp\>/GetAnswer/g
                                在第一个文件中执行替换
        :wnext                  保存文件并移到下一个文件
        q                       中止记录
        @q                      回放q中的记录。这会执行又一次替换和“:wnext”。
                                你现在可以检查一下记录有没有错。
        999@q                   对剩下的文件执行q中的命令

Vim会在最后一个文件上报错，因为“:wnext”无法移到下一个文件上。这时所有的文件
中的操作都完成了。
        
        注意：
        在回放记录的时候，任何错误都会中止回放的过程。所以，要注意保证记录中
        的命令不会产生错误。

这里有一个例外：如果有一个文件不包含“GetResp”，Vim会报错，而整个过程会中止，
要避免这个问题，可以在替换命令后面加一个标记：
>
        :%s/\<GetResp\>/GetAnswer/ge
<
“e”标记通知“:substitute”命令找不到不是错误。

=============================================================================
*12.2*  把“Last, First”改成“First Last”

你有如下样式的一个名字列表：

        Doe, John ~
        Smith, Peter ~

你想把它改成：

        John Doe ~
        Peter Smith ~

这可以用一个命令完成：
>
        :%s/\([^,]*\), \(.*\)/\2 \1/

我们把这个命令分解成几个部分。首先，很明显它是一个替换命令。“%”是行范围，
表示作用与全文。这样替换命令会作用与全文的每一行。
    替换命令的参数格式是“from/to”，正斜杠区分“from”样式和“to”字符串。
所以，“from”部分是：
                                                        \([^,]*\), \(.*\) ~

        第一对\(和\)之间的部分匹配“Last”              \(     \)
            它匹配除逗号外的任何东西                      [^,]
            任意多次                                          *
        匹配逗号                                                 ,
        第二对\(和\)之间的部分匹配“First”                        \(  \)
            匹配任意字符                                             .
            任意多次                                                  *

在“to”部分，我们有“\2”和“\1”。这些称为“回溯索引”。它们指向前面样式中
的\(和\)间的部分。“\2”指向样式中的第二对\(和\)间的部分，也就是“First”名
（译者注：英文中First Name表示姓，即家族名，后面的Last Name表示名字）。“\1”
指向第一对\( \)，即“Last”名。
    你可以在替换部分使用多达9个回溯索引。“\0”表示整个匹配部分。还有一些特殊
的东西可以用在替换命令中，请参见|sub-replace-special|。

=============================================================================
*12.3*  排序

在你的Makefile中常常会有文件列表。例如：

	OBJS = \ ~
		version.o \ ~
		pch.o \ ~
		getopt.o \ ~
		util.o \ ~
		getopt1.o \ ~
		inp.o \ ~
		patch.o \ ~
		backup.o ~

要对这个文件列表排序可以用一个外部过滤命令：
>
	/^OBJS
	j
	:.,/^$/-1!sort

这会先移到“OBJS”开头的行，向下移动一行，然后一行行执行过滤，直到遇到一个空
行。你也可以先选中所有需要排序的行，然后执行“!sort”。那更容易一些，但如果有
很多行就比较麻烦。
    上面操作的结果将是：

	OBJS = \ ~
		backup.o ~
		getopt.o \ ~
		getopt1.o \ ~
		inp.o \ ~
		patch.o \ ~
		pch.o \ ~
		util.o \ ~
		version.o \ ~


注意，列表中每一行都有一个续行符，但排序后就错掉了！“backup.o”在列表的最后，
不需要续行符，但排序后它被移动了，这时它需要有一个续行符。
    最简单的解决方案是用“A \<Esc>”补一个续行符。你也可以在最后一行放一个续
行符，由于后面有一个空行，这样做是不会有问题的。

==============================================================================
*12.4*  单词统计

有时你要写一些有最高字数限制的文字。Vim可以帮你计算字数。
    如果你需要计算的是整个文件的字数，可以用这个命令：
>
	g CTRL-G

不要在“g”后面输入一个空格，这里只是表示用两个命令。
    它的输出是：

	Col 1 of 0; Line 141 of 157; Word 748 of 774; Byte 4489 of 4976 ~

        （译者注：中文是：
        列 1/0; 行141/157; 字(Word) 748/774; 字符(Byte) 4489/4976~
        ）

你可以看到你在第几个单词（748）以及文件中的单词总数（774）。

如果你要知道字数的文字是全文的一部分，你可以移到该文本的开头，输入“g CTRL-G",
然后移到该段文字的末尾，再输入“g CTRL-G”，最后心算出结果来。这是一种很好的
心算练习，不过不是那么容易。你还可以使用可视模式，选中你要计算字数的文本，然后
输入“g CTRL-G”，结果将是：

	Selected 5 of 293 Lines; 70 of 1884 Words; 359 of 10928 Bytes ~

要知道其他计算字数，行数和其他东西总数的方法，可以参见｜count-items|。

=============================================================================
*12.5*  查阅man信息

编辑一个脚本文件或者C程序的时候，有时你会需要从man手册中查询某个命令或者函数
的用法（使用Unix的情况下）。让我们先用一个简单的方法：把鼠标移到对应的单词上
然后输入：
>
	K
<
Vim会在对应的单词上执行外部命令：man。如果能找到相应的手册，那个手册页就会被
显示出来。它常常用more一类的程序显示页面。在手册滚动到文末并回车，控制就会回
到Vim中。（译者注：这一般发生在一些传统的Unix系统上，例如Solari。在Linux中，
它的行为更像less）

这种方法的缺点是你不能同时看到手册和你编辑的文档。这里有一种办法可以把手册显
示到另一个Vim的窗口中。首先，加载man文件类型的外挂：
>
	:source $VIMRUNTIME/ftplugin/man.vim

如果你经常用到这种方法，可以把这个命令加到你的vimrc文件中。现在你可以用“:Man”
命令打开一个显示man手册的窗口了：
>
	:Man csh

你可以在这个新的窗口中上下滚动，而手册的本文会用语法高亮的形式现实。这样，你可
以找到需要的地方（译者注：当然你还可以拷贝需要的东西，这在用K命令的时候做不到
的），并用 CTRL-W w 跳转到原来的窗口中继续工作。
    要指定手册的章节，可以在手册名称前面指定。例如，要找第三章的“echo”：
>
	:Man 3 echo

要跳转到另一个由“word(1)”形式定义的手册，只要在上面敲 CTRL-]。无论怎样，
“:Man”命令总使用相同的窗口。

要显示当前光标下的单词的手册，这样：
>
	\K

（如果你重定义了 <Leader>，用新的字符代替上面命令的反斜杠）。
例如，你要提到下面语句中的“strstr()”函数的返回值：

	if (strstr(input, "aap") == ) ~

可以把鼠标移到“strstr”并输入“\K”。Man使用的窗口会现实strstr()的手册。

=============================================================================
*12.6*  删除多余的空格

有些人认为行末的空格是无用，浪费而难看的。要删除这些每行后面多余的空格，可以
执行如下命令：
>
	:%s/\s\+$//

命令前面指明范围是“%”，所以这会作用于整个文件。“substitute”命令的样式是
“\s\+$”。这表示行末（$）一个或者多个（\+）空格（\s）。后面我们会介绍怎样
写这样的样式。|usr_27.txt|。

另一种没有用的空格是Tab前面的字符。通常这可以删除而不影响格式。但并不是总这
样！所以，你最好手工删除它。执行如下命令：
>
	/ 	

你什么都看不见，其实这是一个空格加一个TAB键。相当于“/<Space><Tab>”。现在，
你可以用“x”删除多余的空格，并保证格式没有改变。接着你可以用“n”找到下一个
位置并重复这个操作。（译者注：要做这种事的人可以同时参考一下 ｜:retab| 命
令。）

=============================================================================
*12.7*  查找单词的使用位置

如果你是一个UNIX用户，你可以用Vim和grep命令的组合来完成编辑包括特定单词的所有
文件的工作。这在你编辑一个程序而且想查看和编辑看所有的包括使用某个变量的文件
的时候非常有用。
    举个例子，假设想编辑所有包括单词“frame_counter”的文件，你可以执行如下命
令：
>
	vim `grep -l frame_counter *.c`

让我们分析一下这个命令。grep从一组文件中查找特定的单词。由于指定了 -l 参数，
grep只列出文件而不打印匹配点。被查找的单词是“frame_counter”，其实这可以是
任何正则表达式。（注意：grep所使用的正则表达式与Vim使用的不完全一样）。
    整个命令用反引号（`）包起来，这告诉UNIX的shell使用该命令的输出作为命令行
的一部分。于是，grep命令产生一个文件列表，并作为Vim的命令参数。Vim将编辑grep
列出来的所有文件。你可以通过“:next”和“:first”命令一个一个处理这些文件。


找到每一行

上面的命令只是找到包括单词的文件。你还需要在文件中找出单词在什么地方。
    Vim有一个内置的命令用于在一组文件中找一个指定的字符串。例如，如果你想在所
有的C文件中查找“error_string”，可以使用如下命令：
>
	:grep error_string *.c

这会使Vim在所有的C文件中查找“error_string”。编辑器会停在第一个匹配点。要找
到下一个匹配点（无论在哪个文件），可以执行“cnext”命令。要回到上一个匹配点，
，可以用“:cprev”命令。使用“clist”可以看到所有的匹配点。
    “:grep”命令会使用一个外部的程序，grep（在Unix上）或者findstr（在
Windows上）。你可以通过'grepprg'选项修改这个外部程序。

=============================================================================

下一章：|usr_20.txt|  命令行的快速输入

版权：参见|manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
