*usr_04.txt*    Vim版本6.0.  最后修改时间：2001年9月3日，翻译于2002年5月30日

                    VIM用户手册 - Bram Moolenaar
                 （由nek_in翻译，nek_in@21cn.com）

                        作小改动


本章介绍几种修正和移动文本的方法，这包括三种修改文本的基本概念：操作符－动作，
可视模式和文本对象。

|04.1|  操作符与动作
|04.2|  改变文本
|04.3|  重复一个修改
|04.4|  可视模式
|04.5|  移动文本
|04.6|  拷贝文本
|04.7|  使用剪贴板
|04.8|  文本对象
|04.9|  覆盖模式
|04.10| 结论

下一章： |usr_05.txt|  设置选项
前一章： |usr_03.txt|  移动
  目录： |usr_toc.txt|

=============================================================================
*04.1*  操作符与动作

在第二章你已经学过使用“x”命令去删除一个字符以及通过个数前缀，例如“4x”去删
除多个字符。
    “dw”命令删除一个单词。你可能认出来了，“w”是词移动命令。实际上，“d”命
令后面可以跟任何“动作”（motion）命令，它会删除从当前位置到光标移动到的目标
位置的的全部内容。
    例如“4w”命令能够向后移动四个单词。所以“d4w”命令删除4个单词。

        To err is human. To really foul up you need a computer. ~
                         ------------------>
                                 d4w

        To err is human. you need a computer. ~

Vim只删除从当前位置到“动作”把光标移动到的位置的前一个位置。这是因为Vim认为
你可能不想删掉一个单词的第一个字符。如果你用“e”命令作为动作，这时Vim认为你
是想删掉整个单词（包括最后一个字符）：

        To err is human. you need a computer. ~
                        -------->
                           d2e

        To err is human. a computer. ~

是否包括光标所在的字符取决与你移动到那个字符的命令。在参考手册中，当不包括这
个字符时，称为“非包含的”（exclusive），而包括这个字符的时候，称为“包含的”
（inclusive）。

“$”命令移动到文件尾。所以，“d$”命令从当前的位置一直删除到行尾。这是一个
“包含的”命令，所以，这行的最后一个字符也会被删除：

        To err is human. a computer. ~
                       ------------>
                            d$

        To err is human ~

以上定义了一个命令组合模式：操作符－动作。你首先输入一个操作符命令，例如，
“d”就是一个删除操作符命令，然后你输入一个动作命令，例如“4l”或者“w”。这
种方法使你可以在任何你能在上面移动的任何文本上执行各种操作。

=============================================================================
*04.2*  修改文本

这是又一个操作符命令：“c”，表示修改，change。它的作用与“d”操作符相似，只
是完成后会切换到插入模式。例如，“cw”修改一个词，更精确的说，它删除一个词，
并切换到插入模式。

        To err is human ~
           ------->
             c2wbe<Esc>

        To be human ~

这里“c2wbe<Esc>”包括如下内容：

        c       修改操作符
        2w      移动两个单词的距离（与操作符合起来，它删除两个单词并进入插入模式） 
        be      插入be这个单词
        <Esc>   切换回普通模式

如果你留意，你会发现一个奇怪的地方：human前面的空格没有被删除。有一句谚语说道：
任何问题都有一个简单，清楚而错误的回答。“cw”命令就属于这种情况。c操作符在很
多地方都和d一样，但有一个例外，“cw”。它实际上象“ce”一样，删除到单词尾。这
样单词后面的空格就不包括在内了。这要追溯到使用老的Vi的日子。由于很多人已经习惯
这种方式了，这个例外就留在Vim里了。


更多的修改命令

像“dd”可以删除一行一样，“cc”修改一整行。但它会留下缩进的内容（就是行首的
空白字符）。

像“d$”删除到行尾，“c$”则修改到行尾。这就像先用“d$”删除一行再用“a”启动
插入模式并加入新的文字。


快捷键

有些“操作符－动作”命令由于经常被使用，所以被设置为单字符命令：

        x  表示  dl  （删除当前光标下的字符）
        X  表示  dh  （删除光标左边的字符）
        D  表示  d$  （删除到行尾）
        C  表示  c$  （修改到行尾）
        s  表示  cl  （修改一个字符）
        S  表示  cc  （修改一整行）


在什么地方加入个数前缀

命令“3dw”和“d3w”都是删除3个单词。如果你非要寻根问底，那么：“3dw”表示
删除一个单词3次，而“d3w”表示删除三个单词一次。这是一个没有分别的分别。
实际上你可以放两个个数前缀，例如，“3d2w”删除两个单词三次，总共删除六个单
词。

替换单个字符

“r”命令不是操作符。它只是等你输入一个字符然后用这个字符替换当前光标上的字
符。你可以用“cl”命令或者“s”命令完成相同的功能，但“r”命令不需要使用<Esc>
退出插入状态：

        there is somerhing grong here ~
        rT           rt    rw

        There is something wrong here ~

通过个数前缀，“r”命令可以使多个字符被同一个字符替换，例如：

        There is something wrong here ~
                           5rx

        There is something xxxxx here ~

要用换行符替换一个字符可以用命令“r<Enter>”。这会删除一个字符并插入一个换行
符。在这里使用个数前缀会删除多个字符但只插入一个换行符：“4r<Enter>”用一个
换行符替换四个字符。

=============================================================================
*04.3* 重复一个修改

“.”是Vim中一个非常简单而有用的命令。它重复最后一个修改操作。例如，假设你在
编辑一个HTML文件，你想删除所有的<B>标记。你把光标移到第一个“<”上，然后用
“df>”命令删除<B>，然后你就可以移到</B>的<上面用“.”命令删除它。“.”命令
执行最后一个修改命令（在本例中，就是“df>”）。要删除下一个<B>标记，移动到下
一个<的位置，再执行“.”命令即可。

                              To <B>generate</B> a table of <B>contents ~
        f<   找第一个<        --->
        df>  删除到>             -->
        f<   找下一个<             --------->
        .    重复df>                        --->
        f<   找下一个<                         ------------->
        .    重复df>                                        -->

“.”命令重复任何除“u”（undo），CTRL-R（redo）和冒号命令外的修改。

再举一个例子：你想把“four”修改成“five”。有好几个地方都要作这种修改。你可
以用如下命令快速完成这个操作：

        /four<Enter>    找到第一个“four”
        cwfive<Esc>     修改成“five”
        n               找下一个“four”
        .               重复修改操作
        n               找下一个“four”
        .               重复修改
                        如此类推……

=============================================================================
*04.4*  可视模式

要删除一些简单的东西，用“操作符－动作”命令可以完成得很好。但很多情况下，并
不容易确定用什么命令可以移到你想修改的地方。这时候，你就需要可视模式了（译者
注：可视是我对“Visual”的翻译，因为Vim的中文提示信息就是这样写的，译者沿用
这种说法）。

你可以用“v”命令启动可视模式。你可以移动光标到需要的地方。当你这样做的时候，
中间的文本会被高亮显示。最后执行一下“操作符”命令即可。
    例如，要从一个单词的一半删除到下一个单词的一半：

                This is an examination sample of visual mode ~
                               ---------->
                                 velllld

                This is an example of visual mode ~

但你这样做的时候，你不需要真的算要按l多少次，你可以在按“d”前马上看到哪些东西
将要被删除。

如果任何时候你不想做什么修改，只用按一下<Esc>就能够退出可视模式。


选中行

如果你想对行做操作，可以使用“V”命令来启动可视模式。你会发现你在你作任何
移动前移动整行都被高亮显示了。当你上下移动，就可以一次选择多行。
    例如，用“Vjj”可以选中三行：

                          +------------------------+
                          | text more text         |
                       >> | more text more text    | |
        selected lines >> | text text text         | | Vjj
                       >> | text more              | V
                          | more text more         |
                          +------------------------+

块选择

如果你要处理一个矩形块内的文本，可以使用CTRL-V启动可视模式。这在处理表格时
非常有用。

                name            Q1      Q2      Q3
                pierre          123     455     234
                john            0       90      39
                steve           392     63      334

要删除中间“Q2”这一列，把光标移动到“Q2”的“Q”上面。按CTRL-V启动块可视模式。
现在用“3j”向下移动三行，然后用“w”移到下一个单词。你可以看到最后一列的第一
个字符也被包括进来了，要去掉它，用“h”命令即可。现在按“d”，中间一列就被删
除了。


移动到另一边

如果你在可视模式下选择了一些文字，然后你又发现你需要改变被选择的文字的另一边，
用“o”命令（提示：“o”表示other end），光标会移动到被选中文字的另一边，现在
你可以移动光标去改变选中文字的开始点了。再按“o”光标还会回到另一端。

当使用块可视模式的时候，你会有四个角，“o”只是把你移到对角上。而用“O”则能
移到同一侧的角上。

=============================================================================
*04.5*  移动文本

但你用“d”，“x”或者其他命令删除文本的时候，这些文字会被存起来。你可以用p命
令重新粘贴出来（p在Vim中表示put）。
    看看下面的例子是怎么工作的。首先，你会在你要删除的那一行上输入“dd”删除一
整行，然后移动到你要重新插入这行的地方输入“p”（put），这样这一行就是被插入
到光标下面。

        a line          a line        a line
        line 2    dd    line 3    p   line 3
        line 3                        line 2

由于你删除的是一整行，“p”命令把该行插入到光标下面。如果你删除的是一行的一部
分（例如一个单词），“p”命令会把它插入到光标的后面。

        Some more boring try text to out commands. ~
                         ---->
                          dw

        Some more boring text to out commands. ~
                         -------->
                            welp

        Some more boring text to try out commands. ~


关于put的更多知识

“P”命令象“p”一样也是插入字符，但位置在光标前面。当你用“dd”删除一行，
“P”会把它查回到光标所在行的前一行。而当你用“dw”删除一个单词，“P”会把它
插回到光标前面。

你还可以执行这个命令多次，每次会插入相同的文本。

“p”和“P”命令接受个数前缀，被插入的文本就会被插入指定的次数。所以“dd”后
加一个“3p”会把删除行的三个拷贝插入到文本中。


交换两个字符

经常发生这样的情况，当你输入字符的时候，你的手指比你的脑子转得快（或者反过来？）
。这样得结果是你经常把“the”敲成“teh”。Vim使你修正这种错误变得容易。只要把
光标移到“teh”的“e”上，然后执行“xp”即可。这个工作过程是：“x”删除一个字符，
保存到寄存器。“p”把这个被保存的字符出入到光标的后面，也就是“h”的后面了。

        teh     th     the~
         x       p

==============================================================================
*04.6*  拷贝文本

要把文本从一个地方拷贝到另一个地方，你可以先删除它，然后用“u”命令恢复，再用
“p”拷到另一个地方。这里还有一种简单的办法：抽出（译者注：没办法，很难用中文
表达Yank这个单词的含义）。“y”命令可以把文字拷贝到寄存器中。然后用“p”命令
粘贴到别处。
    “抽出”（Yanking）是Vim中拷贝命令的名字。由于“c”已经被用于表示change了，
所以拷贝（copy）就不能再用“c”了。但“y”还是可用的。把这个命令称为“yanking”
是为了更容易记住“y”这个键。

由于“y”是一个操作符，所以“yw”命令就是拷贝一个单词了。当然了，个数前缀也是
有效的。要拷贝两个单词，就可以用“y2w”。例如：

        let sqr = LongVariable * ~
                 -------------->
                       y2w

        let sqr = LongVariable * ~
                               p

        let sqr = LongVariable * LongVariable ~

注意：“yw”命令包括单词后面的空白字符。如果你不想要这个字符，改用“ye”命令。

“yy”命令拷贝一整行，就像“dd”删除一整行一样。注意这个区别，“y$”拷贝到行
行尾。

        a text line   yy        a text line            a text line
        line 2                  line 2          p      line 2
        last line               last line              a text line
                                                       last line

==============================================================================
*04.7*  使用剪贴板

如果你使用Vim的GUI版本（gvim），你可以在“Edit”菜单中找到“Copy”项。你可以先
用可视模式选中一些文本，然后使用Edit/Copy菜单。现在被选中的文本被拷进了剪贴板。
你可以把它粘贴到其他程序，或者Vim自己。

如果你已经从其他程序中拷贝了一些文字到剪贴板，你可以在Vim中用Edit/Copy菜单粘贴
进来，这在普通模式和插入模式中都是有效的。如果在可视模式，被选中的文字会被替换
掉。

“Cut”菜单项会在把文字拷进剪贴板前删除它。“Copy”，“Cut”和“粘贴”命令在
弹出菜单中也有（当然了，前提是有弹出式菜单）。如果你的Vim有工具条，在工具条上
也能找到这些命令。

如果你用的不是GUI，或者你根本不喜欢用菜单，你只能用其他办法了。你可以还是用普通
的“y”（yank）和“p”（put）命令，但在前面必须加上"*（一个双引号加一个星号）。
例如，要拷贝一行到剪贴板中：
>
        "*yy
<
要拷贝回来：
>
        "*p
<
这仅在支持剪贴板的Vim版本中才能工作。关于剪贴板的更多内容请参见|09.3|和|clipboard|。

===================================================================================
*04.8*  文本对象

如果你在一个单词的中间而又想删掉这个单词，在你用“dw”前，你必须先移到这个单词的前
面。这里还有一个相似的方法：“daw”。

        this is some example text. ~
                       daw

        this is some text. ~

“daw”的“d”是删除操作符。“aw”就是一个文本对象。提示：“aw”表示“a word”
（一个单词），这样，“daw”就是“delete a word”（删除一个单词）。

使用文本对象是Vim中执行修改的第三种方法。我们已经有“操作符－动作”和可视模式
两种方法了。现在我们又有了“操作符－文本对象”。
    这种方法与“操作符－动作”很相似，但它不是操作到从当前位置到移动目标见的
内容，而是操作光标所在的“文本对象”。它不关心现在光标在对象中的哪个位置。

用“cis”可以改变一个句子。看下面的句子：

        Hello there.  This ~
        is an example.  Just ~
        some text. ~

移动到第二行的开始处。现在使用“cis”：

        Hello there.    Just ~
        some text. ~

现在你输入新的句子“Another line.”：

        Hello there.  Another line.  Just ~
        some text. ~

“cis”包括“c”（change，修改）操作符和“is”文本对象。这表示“Inner
Sentence”（译者注：实在很难用中文表示这个意思了，各位还是记英文名吧）。还有
一个文本对象是“as”，区别是“as”包括句子后面的空白字符而“is”不包括。如果
你要删除一个句子，而且你还想同时删除句子后面空白字符；如果你想保留空白字符而
替换一个句子,则使用“cis”。

你还可以在可视模式下使用文本对象。这样会选中一个文本对象，而且继续保持在可视
模式，你可以继续执行文本对象命令多次。例如，先用“v”启动可视模式，再用“as”
就可以选中一个句子。现在重复执行“as”，就会继续选中更多的句子。最后你可以使用
一个操作符去处理这些被选中的句子。

你可以在这个找到一个详细的文本对象的列表：|text-objects|。

==============================================================================
*04.9*  替换模式

“R”命令启动替换模式。在这个模式下，你输入的每个字符都会覆盖当前光标上的字符。
这会一直持续下去，直到你输入<Esc>。
    在下面的例子中，你在“text”的第一个“t”上启动替换模式：

        This is text. ~
                Rinteresting.<Esc>

        This is interesting. ~

你可能会注意到，这是用十二个字符替换一行中的五个字符。如果超出行的范围，“R”命
令自动进行行扩展，而不是替换到下一行。

你可以通过<Insert>在插入模式和替换模式间切换。

但你使用<BS>（退格）进行修正，你会发现原来被替换的字符又回来了。这就好像一个
“Undo”命令一样。

================================================================================
*04.10*  结论

操作符，移动命令和文本对象可以有各种组合。现在你已经知道它是怎么工作了，你可以
用N个操作符加上M个移动命令，组合处N*M个命令！

你可以在这里找到一个操作符的列表：|operator|

还有很多方法可以删除文本。这是一些经常用到的：

x       删除光标下的字符（“dl”的缩写）
X       删除光标前的字符（“dh”的缩写）
D       从当前位置删除到行尾（“d$”的缩写）
dw      从当前位置删除到下一个单词开头
db      从当前位置删除到前一个单词的开头
diw     删除光标上的单词（不包括空白字符）
daw     删除光标上的单词（包括空白字符）
dG      删除到文末
dgg     删除到文首

如果你用“c”代替“d”，这会变成修改命令，而改用“y”，则变成拷贝命令，等等
等等。

有一些命令，放在哪一章都不合适，列在这里：

        ~       修改光标下字符的大小写，并移动到下一个字符。这不是一个操作符
                （除非设置了'tildeop'），所以你不能连接一个动作命令。这个命
                令在可视模式下也有效，它会改变被选中的所有文本的大小写。

        I       移到到一行的第一个非空字符并启动插入模式

        A       移动到行尾并启动插入模式

==============================================================================

下一章：|usr_05.txt|  设置选项

版权：参见|manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
