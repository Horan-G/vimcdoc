*usr_23.txt*	For Vim version 6.1.		最后修改: 2001年9月3日

		     VIM 用户手册 - Bram Moolenaar 著
                                    Chimin Yen 译

			     编辑特殊文件


本章讨论特殊文件的编辑. 利用 Vim 你可以编辑经过压缩或加密的文件. 有些文件需要
在互联网上存取. 二进制文件也能有限度地编辑.

|23.1|	DOS, Mac 和 Unix 文件
|23.2|	互联网上的文件
|23.3|	加密
|23.4|	二进制文件
|23.5|	压缩文件

下一章: |usr_24.txt|  快速插入
前一章: |usr_22.txt|  寻找要编辑的文件
目  录: |usr_toc.txt|

==============================================================================
*23.1*	DOS, Mac 和 Unix 文件

很久以前, 老式的电传打字机使用两个字符来另起新行. 一个字符把滑动架移回首位
(称为回车, <CR>), 另一个字符把纸上移一行 (称为换行, <LF>).
   当计算机问世以后, 存储器曾经非常昂贵. 有些人就认定没必要用两个字符来表示
行尾. UNIX 开发者决定他们可以用 <Line Feed> 一个字符来表示行尾. Apple 开发者
规定了用 <CR> . MS-DOS (以及微软视窗) 上那些家伙则决定沿用老式的 <CR><LF>.
   那意味着, 如果你试图把一个文件从一种系统移到另一种系统, 那么你就有换行符
方面的麻烦. Vim 编辑器自动识别不同文件格式, 并且不劳你操心就把事情给办妥了.
   选项 'fileformats' 包含各种各样的格式, 那是在编辑一个新文件之初, 用以试验
适用与否的格式. 例如, 下面这个命令告诉 Vim 先尝试用 UNIX 格式, 其次, 尝试 
MS-DOS 格式: >

	:set fileformats=unix,dos

编辑一个文件时, 你将注意到消息报文中有个格式名. 如果你编辑的是本地格式文件, 
你就不会看到任何格式名. 因此一个 Unix 系统上的 Unix 文件不会产生任何关于格式
的报文. 但你若编辑一个 dos 文件, Vim 将通知你这一点:

	"/tmp/test" [dos] 3L, 71C ~

如果是 Mac 文件, 你会看到 "[mac]".
   探测到的文件格式会存入 'fileformat' 选项. 执行下面这个命令来显示你有哪些
文件格式: >

	:set fileformat?

Vim 使用的三种格式如下:

	unix		<LF>
	dos		<CR><LF>
	mac		<CR>


使用 MAC 格式

在 Unix 上, <LF> 用于分行. 但 <CR> 字符混在文本行中间也非罕见. 顺便提一句, 
这种情况经常发生在 Vi (和 Vim) 脚本内.
   在采用 <CR> 作为换行符的 Macintosh 上, <LF> 字符也有可能混在文本行中间.
   结果, 很难 100% 肯定一个 <CR> 和 <LF> 两者都含有的文件, 究竟是 Mac 还是 
Unix 格式. 所以, Vim 假设, 你也许不至于在 Unix 上编辑一个 Mac 文件, 所以干脆
对这种文件格式不作检查. 果真要检查此种格式, 就把 "mac" 加入 'fileformats': >

	:set fileformats+=mac

然后 Vim 就会猜测文件格式. 请注意 Vim 猜错的情形.


让格式无效

如果你用往日美好的 Vi 来尝试编辑一个采用 MS-DOS 格式的文件, 你将会发现每一行
的末尾有个 ^M 字符. (^M 就是 <CR>). 而 Vim 的自动探测功能就避免了这个问题. 莫
非你确实要按那个样子来编辑这个文件吗? 那么你需要让那个格式变得无效: >

	:edit ++ff=unix file.txt

字符串 "++" 告诉 Vim 后面跟的是选项名, 以取代其默认值, 但仅以这一个命令为限. 
"++ff" 用于 'fileformat' 选项. 你也可以用 "++ff=mac" 或 "++ff=dos".
   这样用法并非适用于任意选项, 目前 Vim 仅仅实现了 "++ff" 和 "++enc" . 用全称 
"++fileformat" 和 "++encoding" 也行.


转换

你可以用 'fileformat' 选项把文件从一种格式转换为另一种. 例如, 假定你有个名为
README.TXT 的 MS-DOS 文件, 你要把它转换成 UNIX 格式. 首先编辑这个采用 MS-DOS 
格式的文件: >
	vim README.TXT

Vim 将识别出那是一个 dos 格式文件. 现在把这个文件的格式改为 UNIX: >

	:set fileformat=unix
	:write

这个文件就以 Unix 格式存盘了.

==============================================================================
*23.2*	互联网上的文件

有人给你传送了一封电子邮件, 其中引用了一个以超文本链接 URL 表示的文件. 例如:

	You can find the information here: ~
		ftp://ftp.vim.org/pub/vim/README ~

你本来可以起动一个程序来下载这个文件, 把它存入你本地磁盘, 并起动 Vim 来编辑它.
   有一个简单得多的方法. 把光标移到那个超文本链接里任何一个字符上. 然后使用这
个命令: >

	gf

靠一点儿运气, Vim 将确定用哪个程序来下载这个文件, 并把文件下载下来, 让你编辑
这个副本. 在另一个新窗口打开这个文件, 则用 CTRL-W f.
   如果发生了某个错误, 你会收到出错信息. 很可能那个链接有错, 你没有阅读它的权
限, 或网络联结中断了, 等等. 不幸的是, 很难讲明白出错的原因. 你也许得尝试以人工
方法来下载这个文件.

访问因特网上的文件要安装插入件 netrw 才行. 目前, 下面这些格式的超文本链接可被
识别:

	ftp://		uses ftp
	rcp://		uses rcp
	scp://		uses scp
	http://		uses wget (reading only)

Vim 并非亲自与因特网联系, 它有赖于上面提及的程序事先就安装在你的计算机上. 大
多数 Unix 系统上装有 "ftp" 和 "rcp". 而 "scp" 和 "wget" 也许要另外安装.

Vim 总是会在开始编辑文件时探测一下这些超文本链接, 无论你用哪个命令开始, 包括
如 ":edit" 和 ":split" 这样的命令. 存盘命令也行, 除了 http://.

欲知详情, 包括密码问题, 参见 |netrw|.

==============================================================================
*23.3*	加密

有些信息你会希望只有你一个人能接触. 例如, 当你在计算机上写一份给学生用的试卷. 
你不愿在考试开始之前给聪明的学生琢磨出一种偷阅试题的方法. Vim 能为你给文件加
密, 为你提供一些保护.
   开始编辑一个经过加密的新文件, 请用 "-x" 参数来起动 Vim. 例如: >

	vim -x exam.txt

Vim 提示你确定一个密码, 用于为文件加密和解密:

	Enter encryption key: ~

现在仔细键入那个密码. 你看不到你键入的字符, 它们将为星号所替换. 为了避免由于
打字错误引起麻烦, Vim 要求你再输入一次密码:

	Enter same key again: ~

现在你可以像通常一样编辑这个文件, 把你所有的秘密放进去. 当你编完文件要退出 Vim
时, 这个文件就被加密存盘了.
   当你用 Vim 编辑这个文件时, 它就会要求你再输入那同一个密码. 你不需要用 "-x" 
参数. 你也可以用普通的 ":edit" 命令编辑加密的文件. Vim 给这个文件加上一句魔语,
据以识别那是经过加密的文件.
   如果你试图用另一个程序来阅读这个文件, 你读到的全是垃圾. 如果你用 Vim 来编辑
这个文件, 但输入了错误的密码, 你得到的也是垃圾. Vim 并不具备检验密码正确性的机
理 (这一点使得破译密码更为困难).


切换加密

给一个文件撤除加密, 设定 'key' 选项为空字符串:
>
	:set key=

你下次把这个文件存盘时, 存盘的文件就是未经加密的.
   设定 'key' 选项来启用加密并非好点子, 因为密码清清楚楚显示在屏幕上. 任何人
都可以偷看到你的密码.
   为了避免这样的问题, 命令 ":X" 就给发明出来了. 它向你要一个密码, 就跟 "-x" 
参数索要密码一样: >

	:X
	Enter encryption key: ******
	Enter same key again: ******


加密的局限性

Vim 采用的加密算法有弱点的. 它对于防止那种偷窥者是绰绰有余了, 但不足以防止一
个手上有大量时间的密码专家. 而且, 你应该知道交换文件是不加密的; 所以当你在编辑
文件时, 拥有超级用户权限的人是能够读取未经加密的来自这个文件的交换文件文本的.
   不让人们读到你的交换文件的一个方法就是别用交换文件. 如果在命令行上用了 -n 
参数, 那么, 交换文件就不会用到了(Vim 把所有的东西都存放在内存里). 例如, 要编
辑经过加密的文件 "file.txt", 但不用交换文件, 请用下面的命令: >

	vim -x -n file.txt

如果在此之前你已经编辑过这个文件了, 那么交换文件 swapfile 可以用下面的命令禁止: >

	:setlocal noswapfile

由于没了交换文件, 文件复原就不可能了. 为了避免失去编辑的成果, 要比平时更勤快地
存盘你的文件.

当文件在内存中时, 它以明文形式存在. 任何具备权限的人都能进入编辑者的内存浏览,
并发现这个文件的内容.
   如果你使用信息文件 viminfo, 别忘了文本寄存器的内容也是明明白白写在那儿的.
   如果你真的要保证一个文件内容的安全, 那么, 你必须永远只在一个不联网的可携式
计算机上编辑这个文件, 使用优良的加密工具, 并且在不用时, 把你的计算机锁进一个
大保险箱.

==============================================================================
*23.4*	二进制文件

你可以用 Vim 来编辑二进制文件. Vim 本非为此而设计的, 因而有若干局限. 但你能读
取一个文件, 改动一个字符, 然后把它存盘, 结果, 你的文件就只有那一个字符给改了,
不然就跟原来那个一模一样.
   要保证 Vim 别把它那些聪明的窍门用得不是地方, 起动 Vim 时加上 "-b" 参数: >

	vim -b datafile

这个参数设定了 'binary' 选项. 其作用是排除所有的意外副作用. 例如, 'textwidth' 
设为零, 免得文本行给擅自格式化了. 并且, 文件一律以 Unix 文件格式读取.

二进制模式可以用来修改程序发出的消息报文. 小心别插入或删除任何字符, 那会让程序
运行出问题. 用 "R" 命令进入替换模式.

文件里的很多字符都打印不出来. 用 Hex 格式来阅读这些字符: >

	:set display=uhex

否则, 就用命令 "ga"  来显示光标下的字符值. 当光标位于一个 <Esc> 字符上时, 该命
令的输出看起来就像这样:

	<^[>  27,  Hex 1b,  Octal 033 ~

文件中也许没那么多换行符. 要获取有关的总览, 得把 'wrap' 选项否定了: >

	:set nowrap


字节位置

要发现你在文件中的当前字节位置, 请用这个命令: >

	g CTRL-G

其输出十分冗长:

    Col 9-16 of 9-16; Line 277 of 330; Word 1806 of 2058; Byte 10580 of 12206 ~

最后两个数字就是文件中的当前字节位置和文件字节总数. 这已经考虑了 'fileformat'
选项导致换行符字节不同的影响.
    要移到文件中某个指定的字节, 请用 "go" 命令. 例如, 要移到字节 2345: >

	2345go


使用 XXD

一个真正的二进制编辑器用两种方式来显示文本: 二进制和十六进制格式. 你可以在 Vim
里达到这效果, 只要先用 "xxd" 程序转换这个文件.
   首先以二进制方式编辑这个文件: >

	vim -b datafile

现在用 xxd 把这个文件转换成十六进制: >

	:%!xxd

文本看起来像这样:

	0000000: 1f8b 0808 39d7 173b 0203 7474 002b 4e49  ....9..;..tt.+NI ~
	0000010: 4b2c 8660 eb9c ecac c462 eb94 345e 2e30  K,.`.....b..4^.0 ~
	0000020: 373b 2731 0b22 0ca6 c1a2 d669 1035 39d9  7;'1.".....i.59. ~

现在你可以随心所欲地阅读和编辑这些文本了. Vim 把这些信息当作普通文本来对待. 
修改了十六进制部分并不导致可打印字符部分的改变, 反之亦然.
   最后, 用下面的命令把它转换回来:
>
	:%!xxd -r

只有十六进制部分的修改才会被采用. 右边可打印文本部分的修改忽略不计.

欲知更多详情, 参见 xxd 手册页.

==============================================================================
*23.5*	压缩文件

这很容易: 你可以像编辑任何其它文件一样, 来编辑一个经过压缩的文件. 插入件 "gzip"
负责在你编辑这个文件时把它解压缩. 以及在你存盘时再把它压缩起来.
   目前支持的压缩方法有下面这些:

	.Z	compress
	.gz	gzip
	.bz2	bzip2

Vim 调用上面提到的程序来实际完成压缩和解压缩. 你也许需要先把这些程序安装好.

==============================================================================

下一章: |usr_24.txt|  快速插入

版权: 参见 |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
