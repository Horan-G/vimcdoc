*usr_26.txt*	For Vim version 6.1.		最后修改: 2001年9月3日

		     VIM 用户手册 - Bram Moolenaar 著
                                    Chimin Yen 译
				    
				  重复


编辑工作往往不是杂乱无章的. 同一个修改动作常常重复多次. 在本章中, 我们将解释
几种有用的重复修改动作的方法.

|26.1|	可视模式下的重复
|26.2|	加与减
|26.3|	改动多个文件
|26.4|	在 shell script 里使用 Vim
下一章: |usr_27.txt|  查找命令及模式
前一章: |usr_25.txt|  编辑已经编排过的文本
目  录: |usr_toc.txt|

==============================================================================
*26.1* 可视模式下的重复	

可视模式在反复修改一段文本方面十分方便. 你可以看见高亮度的文本, 从而确定是否
改对了地方. 但选择文本也得打几个字. "gv" 命令再次选择上次选过的文本, 让你对同
一段文本再作别的修改.
   假定你有几行文本, 你要把其中的 "2001" 改成 "2002", 以及 "2000" 改成 "2001":

	The financial results for 2001 are better ~
	than for 2000.  The income increased by 50%, ~
	even though 2001 had more rain than 2000. ~
			2000		2002 ~
	income		45,403		66,234 ~

首先把 "2001" 改成 "2002".  在可视模式下选择这几行文本, 并执行: >

	:s/2001/2002/g

现在用 "gv" 命令再次选择同一文本. 光标在哪儿都没关系. 然后用 ":s/2000/2001/g" 
命令作第二项修改.
   很明显, 你可以多次重复这些动作.

==============================================================================
*26.2*	加和减

当你反复地把一个数改成另一个时, 你常遇到定值的偏移. 在上例中, 每个年份都
加了一.  与其为每个要修改的年份都键入一个置换命令, 不如利用 CTRL-A 命令.
   在上面这段文本中搜索年份: >

	/19[0-9][0-9]\|20[0-9][0-9]

现在按 CTRL-A. 年份都增加了一:

	The financial results for 2002 are better ~
	than for 2000.  The income increased by 50%, ~
	even though 2001 had more rain than 2000. ~
			2000		2001 ~
	income		45,403		66,234 ~

用 "n" 命令找到下一个年份, 并按 "." 以重复 CTRL-A 命令(键入 "." 快一点儿). 为
所有找到的年份重复 "n" 和 "." .
   提示: 设定 'hlsearch' 选项以突显那些你要修改的数字, 然后你可以往前看并修改
得快些.

你可以在 CTRL-A 之前附加数字来增加一个大于一的数. 假定你有这么个列表:

	1.  item four ~
	2.  item five ~
	3.  item six ~

把光标移到 "1." 上并键入: >

	3 CTRL-A

那个 "1." 就变成了 "4.".  同样, 你可以用 "." 命令对其它数字重复这项修改.

再看一个例子:

	006	foo bar ~
	007	foo bar ~

在这些数字上执行 CTRL-A 产生了以下结果:

	007	foo bar ~
	010	foo bar ~

7 加 1 等于 10? 这是因为 Vim 根据首位出现的 "0" 而误以为 "007" 是个八进位数
字. 这种表示法常用于 C 程序. 如果你不要首位为 "0" 的数字被处理成八进位数字, 
请用这个命令: >

	:set nrformats-=octal

CTRL-X 命令用于减少数字, 用法与增加数字类似.

==============================================================================
*26.3*	Making a change in many files

假定你有个变量名为 "x_cnt" 而你要把他改为 "x_counter". 你的许多 C 文件都用了
这个变量. 你需要在所有文件中作此改动.  你得这么做.
   把所有相关文件放进参数列表: >

	:args *.c
<
这个命令找到了所有的 C 文件并编辑其中的第一个. 现在你可以对所有这些文件执行
置换命令: >

	:argdo %s/\<x_cnt\>/x_counter/ge | update

命令 ":argdo" 把另一个命令当作其参数. 而后者则在参数列表内所有的文件里被执行.
   作为参数的置换命令"%s" 作用于所有文本行. 它以模式 "\<x_cnt\>" 来寻找词 
"x_cnt".  "\<" 和 "\>" 用来只匹配那些完整的词, 而不是 "px_cnt" 或 "x_cnt2".
   置换命令的标记中包含 "g", 用以置换同一行文本内出现的所有的匹配词 "x_cnt". 
标记 "e" 用于避免因文件中找不到 "x_cnt" 而出现错误信息. 否则 ":argdo" 命令
就会在遇到第一个找不到 "x_cnt" 的文件时中断.
   字符 "|" 分隔两条命令. 后面的 "update" 命令只有在文件有所改动后才将文件存
盘. 如果没有 "x_cnt" 被改成 "x_counter", 那么什么也不会发生.

还有一个 ":windo" 命令, 用于在所有视窗内执行其参数所规定的命令. 以及 ":bufdo" 
命令, 对所有缓冲执行其参数所规定的命令. 使用中要小心, 因为你在缓冲列表中的文
件数量可能超过你能想像的. 请用 ":buffers" 命令 (或 ":ls") 来检查缓冲.

==============================================================================
*26.4*	在 shell script 里使用 Vim

假定你要在很多文件内把字符串 "-person-" 改成 "Jones", 然后把它们打印出来. 你
该怎么做?  一种方法是键入许许多多命令. 另一种是写个 shell 脚本来完成这件工作.
   作为一个以屏幕为导向的编辑器, Vim 在执行普通模式命令时表现得极为出色. 然而
在批量处理时, 普通模式命令无法产生简洁的带有注释的命令文件; 在此, 你将转而利
用 Ex 模式. 该模式提供你一种友好的命令行介面, 方便你把命令写进一个批量文件. 
("Ex 命令" 无非是命令行 (:) 命令的另一个名称.)
   以下就是你所需要的 Ex 模式命令: >

	%s/-person-/Jones/g
	write tempfile
	quit

你把这些命令放进文件 "change.vim" 里. 现在就用这个 shell 脚本在批量模式下运
行编辑器: >

	for file in *.txt; do
	  vim -e -s $file < change.vim
	  lpr -r tempfile
	done

循环 for-done 是一个 shell 结构, 用来重复执行循环结构内的两行命令, 而变量 
$file 则在每次执行时被设成不同的文件名.
   脚本第二行的作用是对文件 $file 运行 Vim 且在 Ex 模式下 (参数 -e ), 并从文
件 "change.vim" 读取命令.  参数 -s 告诉 Vim 运行在沉默模式下. 换言之, 不要持
续不断的发出 :prompt, 或针对那个问题发出的任何别的提示.
   命令 "lpr -r tempfile" 打印执行中产生的文件 "tempfile" 并把它删除 (那是参
数 -r 的作用).


从标准输入读取

Vim 能从标准输入读取文本. 既然通常是从那儿读取命令的, 你必须告诉 Vim 你读的是
文本. 你能做到这一步, 只要在通常是文件名的地方传送一个参数 "-".  例如: >

	ls | vim -

这个命令让你编辑 "ls" 命令的输出结果, 而不必先把那些输出文本存入一个文件.
   如果你从标准输入读取文本, 那么你可以用参数 "-S" 来读取脚本: >

	producer | vim -S change.vim -


普通模式脚本

如果你真的要在脚本内利用普通模式命令, 你可以这样来用: >

	vim -s script file.txt ...
<
	注意:
	当 "-s" 不与 "-e" 一起用时, 它的意思是不同的. 此时, 它
	的意思是把文件 "script" 里的命令当作普通模式命令来执行.
	而与 "-e" 一起用时, 它的意思是保持沉默, 并且不把下一个
        参数视为文件名.

文件 "script" 里的命令就像你键入它们那样得到执行. 别忘了分行符被解释成按下回
车键 <Enter>. 在普通模式下该动作把光标移到下一行.
   要创建这么一个脚本你可以编辑这个脚本文件, 键入那些命令. 你得想一想每个命令
会产生什么样的结果, 而这可能有点儿困难. 另一种方法是在你人工执行那些命令时把
它们记录下来.  你可以采用下面的方法: >

	vim -w script file.txt ...

所有键入的字符都将被写进文件 "script". 如果你犯了个小错误, 你不妨继续输入, 并
记得事后再编辑一下这个脚本文件.
   参数 "-w" 规定新键入的命令附加在一个已存在的文件末尾.  当你需要一点儿一点儿
记录这个脚本时, 这个选项很不错. 当你要从零开始重新记录你的脚本时, 则用 "-W" 参
数.  该参数重写任何已存在的文件.

==============================================================================

下一章: |usr_27.txt|  搜索命令和模式

版权: 参见 |manual-copy:wright|  vim:tw=78:ts=8:ft=help:norl:
